<?php
  // $Id: civicrm_member_roles.module,v 1.3.2.4.2.5 2008/09/01 04:17:11 posco Exp $

  /**
   * Copyright (C) 2010 Neil Goodman
   * @license GNU General Public License version 2 or later
   * 
   * @file
   * Synchronize CiviCRM Contacts with Membership Status to a specified Drupal Role both automatically and manually.
   */

  /**
   * Implementation of hook_menu().
   */
function civicrm_member_roles_menu() 
{
    if ( ! civicrm_initialize( ) ) {
        return;
    }
    $items[] = array();
    $items['admin/settings/civicrm_member_roles'] = array(
                                                          'title' => t('CiviMember Roles Sync'),
                                                          'description' => t('Add/remove association rules and configure settings. Also perform manual synchronization.'),
                                                          'page callback' => 'civicrm_member_roles_show_rules',
                                                          'access callback' => 'user_access',
                                                          'access arguments' => array('access settings'),
                                                          'type' => MENU_NORMAL_ITEM,
                                                          );      
    $items['admin/settings/civicrm_member_roles/show_rules'] = array(
                                                                     'title' => t('List Association Rule(s)'),
                                                                     'access callback' => 'user_access',
                                                                     'access arguments' => array('access settings'),
                                                                     'weight' => -5,
                                                                     'type' => MENU_DEFAULT_LOCAL_TASK,
                                                                     );       
    $items['admin/settings/civicrm_member_roles/add_rule'] = array(
                                                                   'title' => t('Add Association Rule'),
                                                                   'page callback' => 'drupal_get_form',
                                                                   'page arguments' => array('civicrm_member_roles_add_rule_form'),
                                                                   'access callback' => 'user_access',
                                                                   'access arguments' => array('access settings'),
                                                                   'type' => MENU_LOCAL_TASK,
                                                                   ); 
    $items['admin/settings/civicrm_member_roles/configure'] = array(
                                                                    'title' => t('Configure'),
                                                                    'page callback' => 'drupal_get_form',
                                                                    'page arguments' => array('civicrm_member_roles_configure'),
                                                                    'access callback' => 'user_access',
                                                                    'access arguments' => array('access settings'),
                                                                    'type' => MENU_LOCAL_TASK,
                                                                    );
    $items['admin/settings/civicrm_member_roles/manual_sync'] = array(
                                                                      'title' => t('Manually Synchronize'),
                                                                      'page callback' => 'drupal_get_form',
                                                                      'page arguments' => array('civicrm_member_roles_manual_sync'),
                                                                      'access callback' => 'user_access',
                                                                      'access arguments' => array('access settings'),
                                                                      'type' => MENU_LOCAL_TASK,
                                                                      );        
    return $items;
}

/**
 * Implementation of hook_perm().
 */
function civicrm_member_roles_perm() 
{
    return array('access settings');
}

/**
 * Implementation of hook_user().
 */
function civicrm_member_roles_user($op, &$edit, &$account) 
{
    if ( ! civicrm_initialize( ) ) {
        return;
    }
    if (variable_get('civicrm_member_roles_sync_method', 0) == 0) {
        if ($op == 'login' || $op == 'logout') {
            _civicrm_member_roles_sync($account->uid);
        }
    }
}

/**
 * Implementation of hook_cron().
 */
function civicrm_member_roles_cron() 
{
    if ( ! civicrm_initialize(TRUE) ) {
        return;
    }
    if (variable_get('civicrm_member_roles_sync_method', 0) == 1) {
        _civicrm_member_roles_sync();
    }
}

/**
 * Show stored association rules and delete rules.
 */
function civicrm_member_roles_show_rules($action = NULL, $id = NULL) 
{
    if ( ! civicrm_initialize( ) ) {
        return;
    }    
    //Delete rule
    if ($action == 'delete') {
        if (is_numeric($id)) {
            $delete = db_query('DELETE FROM {civicrm_member_roles_rules} WHERE rule_id = %d', $id);
      
            if ($delete) {
                drupal_set_message(t('Rule ID !1 was successfully deleted.', array('!1' => $id)));
            } else {
                drupal_set_message(t('There was an error deleting the association rule. Please check your database settings and try again. If you continue to get this error message then try to reinstall CiviMember Roles Sync.'), $type = 'error');
            }
        }
    }
  
    $status = _civicrm_member_roles_get_data('status');
    $type = _civicrm_member_roles_get_data('types');
    $roles = user_roles(TRUE);
  
    //Begin building main output table.
    $header = array(t('Rule ID'), t('Rule Name ("CiviMember Membership Type" --> "Drupal Role")'), t('Current Codes'), t('Expired Codes'), t('Operation'));
    $data = array();

    $rules = db_query('SELECT * FROM {civicrm_member_roles_rules} ORDER BY rule_id ASC');
    while ($result = db_fetch_object($rules)) {
        $codes = unserialize($result->status_codes);
        $current = "";
        $expired = "";
        foreach ($codes['current'] as $value) {
            $current .= $status[$value] . ", ";
        }
        
        foreach ($codes['expired'] as $value) {
            $expired .= $status[$value] . ", ";
        }
        
        $data[] = array(
                        check_plain($result->rule_id), 
                        check_plain($type[$result->type_id] . " --> " . $roles[$result->rid]),
                        check_plain(trim($current, ", ")),
                        check_plain(trim($expired, ", ")),
                        l(t('edit'), 'admin/settings/civicrm_member_roles/add_rule' . '/' . check_plain($result->rule_id)) . '&nbsp;&nbsp;' . l(t('delete'), 'admin/settings/civicrm_member_roles/delete' . '/' . check_plain($result->rule_id)),
                        );
    }
    
    if (!empty($data)) {
        $output = t('Use the "Add Association Rule" form to add new rules.');
        $output .= theme('table', $header, $data);
    } else {
        $output = t('There are no rules currently set. Use the "Add Association Rule" form to add one.');
    }
    
    return $output;
}

/**
 * Manual sync form. Provides a sumbit button to manually sync memberships to roles.
 *
 * @ingroup forms
 * @see civicrm_member_roles_manual_sync_submit()
 */
function civicrm_member_roles_manual_sync() 
{
    $form = array();
    $form['manual_sync'] = array(
                                 '#type' => 'fieldset',
                                 '#title' => t('Manual Synchronization:'),
                                 );
    $form['manual_sync']['manual_sync_submit'] = array(
                                                       '#type' => 'submit',
                                                       '#value' => t('Synchronize CiviMember Membership Types to Drupal Roles now'),
                                                       );
    
    return $form;
}

/**
 * Implementation of hook_submit() for the manual sync form.
 */
function civicrm_member_roles_manual_sync_submit($form, &$form_state) 
{
    if ( ! civicrm_initialize( ) ) {
        return;
    } 
    if (_civicrm_member_roles_sync()) {
        drupal_set_message(t('CiviMember Memberships and Drupal Roles have been synchronized using available rules. Note: if no association rules exist then synchronization has not been completed.'));
    } else {
        drupal_set_message(t('There was an error. CiviMember Memberships and Drupal Roles could not be synchronized.'), $type = 'error');
    }
}

/**
 * Configuration form. Allows user to edit the Automatic Synchronization Method.
 *
 * @ingroup forms
 */
function civicrm_member_roles_configure() 
{
    $form = array();
    $form['settings'] = array(
                              '#type' => 'fieldset',
                              '#title' => t('Settings'),
                              );
    $form['settings']['civicrm_member_roles_sync_method'] = array(
                                                                  '#type' => 'radios',
                                                                  '#title' => t('Automatic Synchronization Method'),
                                                                  '#description' => t('Select which method CiviMember Roles Sync will use to automatically synchronize Memberships and Roles. If you choose user login/logout, you will have to run an initial "Manual Synchronization" after you create a new rule for it to be applied to all users and contacts. Leave the default setting if you are unsure which method to use.'),
                                                                  '#default_value' => variable_get('civicrm_member_roles_sync_method', 0),
                                                                  '#options' => array(t('Synchronize whenever a user logs in or logs out. This action is performed only on the user logging in or out.'), t('Synchronize when Drupal cron is ran. This action will be performed on all users and contacts.'), t('Disable automatic synchronization. You will have to use the "Manually Synchronize" form to synchronize memberships and roles yourself.')),
                                                                  );
    
    return system_settings_form($form);
}

/**
 * Implementation of hook_form(). Add/edit association rules.
 *
 * @ingroup forms
 * @see civicrm_member_roles_add_rule_validate()
 * @see civicrm_member_roles_add_rule_submit()
 */
function civicrm_member_roles_add_rule_form($form = NULL, $id = NULL) 
{
    if ( ! civicrm_initialize( ) ) {
        return;
    }
    $membership_options = array(0 => '--------') + _civicrm_member_roles_get_data('types');
    $status_options = _civicrm_member_roles_get_data('status');
    $roles = user_roles(TRUE);
  
    //Let's get rid of the authenticated role as it is a useless option for this module
    unset($roles[2]);
    
    //Begin add form
    $form = array();      
    $form['add_rule'] = array(
                              '#type' => 'fieldset',
                              '#title' => t('Association Rule'),
                              '#description' => t('Choose a CiviMember Membership Type and a Drupal Role below. This will associate that Membership with the Role. If you would like the have the same Membership be associated with more than one role, you will need to add a second association rule after you have completed this one.'),
                              '#tree' => TRUE,
                              '#parents' => array('add_rule'), 
                              );   
    $form['add_rule']['select_membership'] = array(
                                                   '#type' => 'select',
                                                   '#title' => t('Select a CiviMember Membership Type'),
                                                   '#options' => $membership_options,
                                                   '#required' => TRUE,
                                                   );    
    $form['add_rule']['select_role'] = array(
                                             '#type' => 'select',
                                             '#title' => t('Select a Drupal Role'),
                                             '#options' => array(0 => '--------') + $roles,
                                             '#required' => TRUE,
                                             );    
    $form['status_code'] = array(
                                 '#type' => 'fieldset',
                                 '#title' => t('CiviMember Status Rules'),
                                 '#description' => t('Select which CiviMember Status Rules will be used for "Current" and "Expired" status. A "Current" status rule will add the above role to a user account. An "Expired" status rule will remove the above role from a user account.'),
                                 '#tree' => TRUE,
                                 );    
    $form['status_code']['current'] = array(
                                            '#type' => 'checkboxes',
                                            '#title' => t('Current Status'),
                                            '#description' => t('Select all CiviMember Status Rule(s) that represent current status.'),
                                            '#options' => $status_options,
                                            '#required' => TRUE,
                                            );    
    $form['status_code']['expired'] = array(
                                            '#type' => 'checkboxes',
                                            '#title' => t('Expired Status'),
                                            '#description' => t('Select all CiviMember Status Rule(s) that represent expired status.'),
                                            '#options'=> $status_options,
                                            '#required' => TRUE,
                                            );    
    $form['submit'] = array(
                            '#type' => 'submit',
                            '#value' => t('Add association rule'),
                            );
  
    //Begin edit form
    if (!empty($id) && is_numeric($id)) {
        $default_values = db_fetch_object(db_query('SELECT * FROM {civicrm_member_roles_rules} WHERE rule_id = %d', $id));
        if (!$default_values) {
            drupal_set_message(t('There was an error in obtaining the association rule for edit. Please check your database settings and try again. If you continue to get this error message then try to reinstall CiviMember Roles Sync.'));
        }
    
        $codes = unserialize($default_values->status_codes);
        foreach($codes['current'] as $key => $value) {
            $codes['current'][$key] = check_plain($value);
        }
        foreach($codes['expired'] as $key => $value) {
            $codes['expired'][$key] = check_plain($value);
        }
    
        //Alter above add form with default values.
        $form['add_rule']['select_membership']['#default_value'] = $default_values->type_id;
        $form['add_rule']['select_role']['#default_value'] = $default_values->rid;
        $form['status_code']['current']['#default_value'] = $codes['current'];
        $form['status_code']['expired']['#default_value'] = $codes['expired'];
        $form['edit_flag'] = array('#type' => 'hidden', '#value' => check_plain($id));
        $form['submit']['#value'] = t('Edit association rule');
    }
    
    return $form;
}

/**
 * Implementation of hook_validate() for the add/edit rule form.
 */
function civicrm_member_roles_add_rule_form_validate($form, &$form_state) 
{
    //Make sure there is a CiviMember Membership Type and a Drupal Role selected.
    if (is_numeric($form_state['values']['add_rule']['select_membership']) && is_numeric($form_state['values']['add_rule']['select_role'])) {
        if ($form_state['values']['add_rule']['select_membership'] == 0 || $form_state['values']['add_rule']['select_role'] == 0) {
            form_set_error('add_rule', t('You must select both a CiviMember Membership Type and a Drupal Role from the "Association Rule" section.'));
        }
    } else {
        form_set_error('add_rule', t('CiviMember Membership Type and Drupal Role values were not numeric.'));
    }
    
    //Check for conflicting status rules.
    foreach ($form_state['values']['status_code']['current'] as $current_key => $current_value) {
        if (is_numeric($form_state['values']['status_code']['expired'][$current_key]) && is_numeric($current_value)) {
            if ($form_state['values']['status_code']['expired'][$current_key] > 0 && $current_value > 0) {
                form_set_error('', t('You can not have the same Status Rule registered as both "Current" and "Expired".'));
            }
        } else {
            form_set_error('', t('Status Rules values were not numeric.'));
        }
    }
  
    //Validate edit flag if set
    if (isset($form_state['values']['edit_flag']) && !is_numeric($form_state['values']['edit_flag'])) {
        for_set_error('', t('Edit flag was not numeric.'));
    }
}

/**
 * Implementation of hook_submit() for the add/edit rule form.
 */
function civicrm_member_roles_add_rule_form_submit($form, &$form_state) 
{
    if ( ! civicrm_initialize( ) ) {
        return;
    }
    //Build array of status rules in order to serialize into the database
    $codes = array('current', 'expired');
    $codes['current'] = array();
    $codes['expired'] = array();
    
    foreach ($form_state['values']['status_code']['current'] as $key => $value) {
        if ($form_state['values']['status_code']['expired'][$key] > 0) {
            $codes['expired'][] = $form_state['values']['status_code']['expired'][$key];
        } elseif ($value > 0) {
            $codes['current'][] = $value;
        }
    }
  
    //If edit_flag is set then process as an edit form, if not then process as an add form.
    if (isset($form_state['values']['edit_flag'])) {
        $edit_rule = db_query('UPDATE {civicrm_member_roles_rules}
                          SET rid = %d, type_id = %d, status_codes = \'%s\'
                          WHERE rule_id = %d',
                              (int) $form_state['values']['add_rule']['select_role'],
                              (int) $form_state['values']['add_rule']['select_membership'],
                              serialize($codes),
                              $form_state['values']['edit_flag']);
        if ($edit_rule) {
            drupal_set_message(t('Your association rule has been edited.'));
        } else {
            drupal_set_message(t('There was an error editing the association rule. Please check your database settings and try again. If you continue to get this error message then try to reinstall CiviMember Roles Sync.'), $type = 'error');
        }
    } else {
        $add_rule = db_query('INSERT INTO {civicrm_member_roles_rules} (rid, type_id, status_codes)
                          VALUES(%d, %d, \'%s\')', 
                             (int) $form_state['values']['add_rule']['select_role'], 
                             (int) $form_state['values']['add_rule']['select_membership'], 
                             serialize($codes));
        if ($add_rule) {
            drupal_set_message(t('Your association rule has been added.'));
        } else {
            drupal_set_message(t('There was an error adding the association rule. Please check your database settings and try again. If you continue to get this error message then try to reinstall CiviMember Roles Sync.'), $type = 'error');
        }
    }
}

/**
 * Finds members and applies roles based on the rules defined in the settings page. If the ext_uid param is defined then
 * this function will only sync one user.
 */
function _civicrm_member_roles_sync($ext_uid = NULL) 
{    
    if ( ! civicrm_initialize( ) ) {
        return;
    }  
    //Bring in CRM_Core_BAO_UFMatch class so we can find Drupal UIDs
    global $civicrm_root;
    require_once $civicrm_root . '/CRM/Core/BAO/UFMatch.php';
  
    $rules = db_query('SELECT * FROM {civicrm_member_roles_rules}');
  
    //Error check
    if ($rules === FALSE) {
        return FALSE;
    }
  
    while ($result = db_fetch_object($rules)) {
        $codes = unserialize($result->status_codes);
    
        //CiviCRM query
        $memberships = "
SELECT    status_id, email, cm.contact_id
FROM      civicrm_membership cm
LEFT JOIN civicrm_email ce ON cm.contact_id = ce.contact_id 
LEFT JOIN civicrm_contact cc ON cm.contact_id = cc.id  
WHERE     cc.contact_type = 'Individual'  
AND       ce.is_primary = 1
AND       membership_type_id = %1
";
        $params = array( 1 => array($result->type_id, 'Integer') );
        
        if (!empty($ext_uid)) {
      
            //Let's get the UID's Contact ID so we only grab one record from the CiviCRM DB.
            $cid = CRM_Core_BAO_UFMatch::getContactId($ext_uid);

            if(!empty($cid)) {
                $memberships .= ' AND cm.contact_id = %3';
                $params[3] = array((int) $cid, 'Integer');
            } else {
                watchdog('civicrm_member_roles', 
                         'The uid: @uid did not have a CiviCRM Contact ID.',
                         array('@uid' => (int) $ext_uid),
                         WATCHDOG_ERROR);
                return FALSE;
            }
        }

        $dao =& CRM_Core_DAO::executeQuery($memberships, $params);

        $add_accounts = array();
        $remove_accounts = array();
        while ($dao->fetch()) {
      
            //Let's get the Drupal UID based on CiviCRM Contact ID
            $uid = CRM_Core_BAO_UFMatch::getUFId($dao->contact_id);
      
            /* We silently don't add the UID if it doesn't exist so we don't force that a Drupal user exists
             * for each CiviCRM contact.
             */
            if (!empty($uid)) {
        
                //If the record has the correct status, set up the Drupal user to either have a role added or removed
                if (in_array($dao->status_id, $codes['current'])) {
                    $add_accounts[] = (int) $uid;
                } elseif (in_array($dao->status_id, $codes['expired'])) {
                    $remove_accounts[] = (int) $uid;
                }
            }
        }
    
        unset($dao);

	// also make sure the add has precedence over remove, i.e. if we add a role, we dont remove it
	// in case of multiple membership types
	$remove_accounts = array_diff( $remove_accounts, $add_accounts );
	        
        //Let's make sure the rid is really an rid.
        if(is_numeric($result->rid)) {
      
            /* Now we are going to give the current user temp user 1 status (superuser) so they can edit roles.
             * We turn session saving off to prevent permission escalation in case there is a problem loading
             * the page.
             */
            global $user;
            $current_user = $user->uid;
            session_save_session(FALSE);
            $user = user_load(array('uid' => 1));
      
            //Apply roles.
            user_multiple_role_edit($add_accounts, 'add_role', $result->rid);
            user_multiple_role_edit($remove_accounts, 'remove_role', $result->rid);
      
            //Now we restore the current user and renable session saving.
            $user = user_load(array('uid' => $current_user));
            session_save_session(TRUE);
        } else {
            return FALSE;
        }
    }
  
    return TRUE;    
}

/**
 * This function returns an array of either membership types or status rules depending on the $type param.
 */
function _civicrm_member_roles_get_data($type) 
{
    if ( ! civicrm_initialize( ) ) {
        return;
    } 
      
    switch ($type) {
    case 'status':
        $sql = 'SELECT id, name FROM civicrm_membership_status;';
        break;
      
    case 'types':
        $sql = 'SELECT id, name FROM civicrm_membership_type;';
        break;
      
    default:
        $sql = '';
        drupal_set_message(t('Invalid parameter was given to _civicrm_member_roles_get_data(). Param: "!1".', array('!1' => $type)));
        break;
    }

    $dao =& CRM_Core_DAO::executeQuery($sql);
  
    $result = array();
    while ($dao->fetch()) {
        $result[$dao->id] = $dao->name; 
    }
  
    unset($dao);
  
    if (empty($result)) {
        drupal_set_message(t('CiviMember Membership Types or Status Rules have not been configured. Please do so on the "Administer CiviCRM" page.'), $type = 'error');
    }
  
    return $result;
}
